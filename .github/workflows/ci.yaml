name: CI
permissions:
  contents: read

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches-ignore:
      - 'gh-readonly-queue/**'
  workflow_dispatch:
  merge_group:
    types: [checks_requested]

env:
  RUSTFLAGS: -Dwarnings
  MACOSX_DEPLOYMENT_TARGET: "14.5"

jobs:
  build_and_test:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    strategy:
      matrix:
        workspace: ['Cargo.toml', 'fuzz/Cargo.toml']
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rustalias: [stable, nightly, msrv]
        feature_flag:
        - "--all-features"
        - "--no-default-features"
        - ""
        include:
        - rustalias: stable
          rust: stable
        - rustalias: msrv
          rust: '1.83'
        - rustalias: nightly
          rust: nightly
        # Break out a separate test shard for specific dependencies on their own.
        - feature_flag: "--no-default-features --features deflate-flate2-zlib-rs"
          workspace: 'Cargo.toml'
        - feature_flag: "--no-default-features --features deflate-zopfli"
          workspace: 'Cargo.toml'
    name: 'Build and test ${{ matrix.feature_flag }}: ${{ matrix.os }}, ${{ matrix.rustalias }}'
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v5
    - run: rustup toolchain add ${{ matrix.rust }} && rustup default ${{ matrix.rust }}

    - run: cargo check --manifest-path ${{ github.workspace }}/${{ matrix.workspace }} --all ${{ matrix.feature_flag }} --bins --examples
    - run: cargo test --manifest-path ${{ github.workspace }}/${{ matrix.workspace }} --all ${{ matrix.feature_flag }}
  miri:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    strategy:
      matrix:
        workspace: ['Cargo.toml', 'fuzz/Cargo.toml']
        feature_flag:
        - "--all-features"
        - "--no-default-features"
        - ""
        include:
          # Break out a separate test shard for specific dependencies on their own.
        - feature_flag: "--no-default-features --features deflate-flate2-zlib-rs"
          workspace: 'Cargo.toml'
        - feature_flag: "--no-default-features --features deflate-zopfli"
          workspace: 'Cargo.toml'
    name: 'Miri ${{ matrix.feature_flag }}'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    - run: sudo apt install gcc-s390x-linux-gnu
    - run: rustup toolchain add nightly-x86_64-unknown-linux-gnu
    - run: rustup toolchain add --force-non-host stable-s390x-unknown-linux-gnu
    - run: rustup target add s390x-unknown-linux-gnu --toolchain stable-s390x-unknown-linux-gnu
    - run: rustup component add --toolchain nightly-x86_64-unknown-linux-gnu miri
    - run: cargo +nightly miri test --manifest-path ${{ github.workspace }}/${{ matrix.workspace }} --target s390x-unknown-linux-gnu --all ${{ matrix.feature_flag }} --bins --examples
  cargo_semver:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    strategy:
      matrix:
        # Only do semver checks on the released library.
        workspace: ['Cargo.toml']
        feature_group: ["all-features", "default-features", "only-explicit-features"]
    name: 'Semver checks: ${{ matrix.feature_group }}'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          manifest-path: ${{ github.workspace }}/${{ matrix.workspace }}
          feature-group: ${{ matrix.feature_group }}
  cargo_fmt:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - run: rustup toolchain add nightly && rustup default nightly && rustup component add rustfmt
      - name: fmt
        run: cargo fmt --all -- --check
      - name: fmt fuzz
        run: cargo fmt --all --manifest-path ${{ github.workspace }}/fuzz/Cargo.toml -- --check

  check_minimal_versions:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    strategy:
      matrix:
        # Only check minimal versions for the released library.
        workspace: ['Cargo.toml']
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - run: rustup toolchain add nightly && rustup default nightly

      - name: resolve minimal versions
        run: cargo -Z minimal-versions update --manifest-path ${{ github.workspace }}/${{ matrix.workspace }}
      - name: check
        run: cargo check --all-features --manifest-path ${{ github.workspace }}/${{ matrix.workspace }}
      - name: test
        run: cargo test --all-features --manifest-path ${{ github.workspace }}/${{ matrix.workspace }}

  style_and_docs:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    strategy:
      matrix:
        workspace: ['Cargo.toml', 'fuzz/Cargo.toml']
        feature_flag: ["--all-features", "--no-default-features", ""]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    - run: rustup toolchain add nightly && rustup default nightly && rustup component add clippy

    - run: cargo clippy --workspace ${{ matrix.feature_flag }} --manifest-path ${{ github.workspace }}/${{ matrix.workspace }} -- -D warnings
    - run: cargo doc --no-deps --workspace ${{ matrix.feature_flag }} --manifest-path ${{ github.workspace }}/${{ matrix.workspace }}

  fuzz_read:
    runs-on: ubuntu-latest
    needs:
      - build_and_test
      - cargo_fmt
      - style_and_docs
      - miri
      - check_minimal_versions
    steps:
      - uses: actions/checkout@v5
      - run: rustup toolchain add nightly && rustup default nightly && rustup component add clippy

      - run: cargo install cargo-afl --version 0.15.19

      - name: cargo afl system-config
        run: cargo afl system-config
      - name: clippy
        run: cargo afl clippy --all-features -p fuzz_read --manifest-path ${{ github.workspace }}/fuzz/Cargo.toml -- -D warnings
      - name: compile fuzz
        run: cargo afl build --all-features -p fuzz_read --manifest-path ${{ github.workspace }}/fuzz/Cargo.toml
      - name: run fuzz
        timeout-minutes: 130
        run: cargo afl fuzz -i ${{ github.workspace }}/fuzz/read/in -o out -V 7200 -- ${{ github.workspace }}/fuzz/target/debug/fuzz_read
      - name: Minimize corpus
        run: cargo afl cmin -i out/default/queue -o out_cmin -- ${{ github.workspace }}/fuzz/target/debug/fuzz_read
      - name: Report coverage
        run: cargo afl showmap -C -i out -o map -- ${{ github.workspace }}/fuzz/target/debug/fuzz_read
      - run: sudo apt install rename
        if: always()
      - name: Rename files
        if: always()
        run: |
            find . -type f -exec rename 's/:/-/g' {} \;
      - name: Upload updated corpus
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_read_corpus
          path: out_cmin/*
      - name: Upload any failure inputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_read_bad_inputs
          path: out/default/crashes/*
          if-no-files-found: ignore
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_read_coverage
          path: map

  fuzz_read_with_no_features:
    runs-on: ubuntu-latest
    needs:
      - build_and_test
      - cargo_fmt
      - style_and_docs
      - miri
      - check_minimal_versions
    steps:
      - uses: actions/checkout@v5
      - run: rustup toolchain add nightly && rustup default nightly && rustup component add clippy

      - run: cargo install cargo-afl --version 0.15.19

      - name: cargo afl system-config
        run: cargo afl system-config
      - name: clippy
        run: cargo afl clippy --no-default-features -p fuzz_read --manifest-path ${{ github.workspace }}/fuzz/Cargo.toml -- -D warnings
      - name: compile fuzz
        run: cargo afl build -p fuzz_read --manifest-path ${{ github.workspace }}/fuzz/Cargo.toml
      - name: run fuzz
        timeout-minutes: 130
        run: cargo afl fuzz -i ${{ github.workspace }}/fuzz/read/in -o out -V 7200 -- ${{ github.workspace }}/fuzz/target/debug/fuzz_read
      - name: Report coverage
        run: cargo afl showmap -C -i out -o map -- ${{ github.workspace }}/fuzz/target/debug/fuzz_read
      - run: sudo apt install rename
        if: always()
      - name: Rename files
        if: always()
        run: |
            find . -type f -exec rename 's/:/-/g' {} \;
      - name: Upload any failure inputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_read_bad_inputs_no_features
          path: out/default/crashes/*
          if-no-files-found: ignore
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_read_coverage_no_features
          path: map

  fuzz_write:
    runs-on: ubuntu-latest
    needs:
      - build_and_test
      - cargo_fmt
      - style_and_docs
      - miri
      - check_minimal_versions
    steps:
      - uses: actions/checkout@v5
      - run: rustup toolchain add nightly && rustup default nightly && rustup component add clippy

      - run: cargo install cargo-afl --version 0.15.19

      - name: cargo afl system-config
        run: cargo afl system-config
      - name: clippy
        run: cargo afl clippy --all-features -p fuzz_write --manifest-path ${{ github.workspace }}/fuzz/Cargo.toml -- -D warnings
      - name: compile fuzz
        run: cargo afl build --all-features -p fuzz_write --manifest-path ${{ github.workspace }}/fuzz/Cargo.toml
      - name: run fuzz
        timeout-minutes: 130
        run: cargo afl fuzz -i ${{ github.workspace }}/fuzz/write/in -o out -V 7200 -x ${{ github.workspace }}/fuzz/write/fuzz.dict -- ${{ github.workspace }}/fuzz/target/debug/fuzz_write
      - name: Minimize corpus
        run: cargo afl cmin -i out/default/queue -o out_cmin -- ${{ github.workspace }}/fuzz/target/debug/fuzz_write
      - name: Report coverage
        run: cargo afl showmap -C -i out -o map -- ${{ github.workspace }}/fuzz/target/debug/fuzz_write
      - run: sudo apt install rename
        if: always()
      - name: Rename files
        if: always()
        run: |
            find . -type f -exec rename 's/:/-/g' {} \;
      - name: Upload updated corpus
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_write_corpus
          path: out_cmin/*
      - name: Upload any failure inputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_write_bad_inputs
          path: out/default/crashes/*
          if-no-files-found: ignore
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_write_coverage
          path: map

  fuzz_write_with_no_features:
    runs-on: ubuntu-latest
    needs:
      - build_and_test
      - cargo_fmt
      - style_and_docs
      - miri
      - check_minimal_versions
    steps:
      - uses: actions/checkout@v5
      - run: rustup toolchain add nightly && rustup default nightly && rustup component add clippy

      - run: cargo install cargo-afl --version 0.15.19

      - name: cargo afl system-config
        run: cargo afl system-config
      - name: clippy
        run: cargo afl clippy --no-default-features -p fuzz_write --manifest-path ${{ github.workspace }}/fuzz/Cargo.toml -- -D warnings
      - name: compile fuzz
        run: cargo afl build --all-features -p fuzz_write --manifest-path ${{ github.workspace }}/fuzz/Cargo.toml
      - name: run fuzz
        timeout-minutes: 130
        run: cargo afl fuzz -i ${{ github.workspace }}/fuzz/write/in -o out -V 7200 -x ${{ github.workspace }}/fuzz/write/fuzz.dict -- ${{ github.workspace }}/fuzz/target/debug/fuzz_write
      - name: Report coverage
        run: cargo afl showmap -C -i out -o map -- ${{ github.workspace }}/fuzz/target/debug/fuzz_write
      - run: sudo apt install rename
        if: always()
      - name: Rename files
        if: always()
        run: |
            find . -type f -exec rename 's/:/-/g' {} \;
      - name: Upload any failure inputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_write_bad_inputs_no_features
          path: out/default/crashes/*
          if-no-files-found: ignore
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_write_coverage_no_features
          path: map
